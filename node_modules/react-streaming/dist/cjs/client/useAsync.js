"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAsync = void 0;
const react_1 = require("react");
const utils_1 = require("./utils");
const parse_1 = require("@brillout/json-serializer/parse");
const initData_1 = require("../shared/initData");
const useSuspense_1 = require("../shared/useSuspense");
const key_1 = require("../shared/key");
const globalObject = (0, utils_1.getGlobalObject)('useAsync.ts', { suspenses: {} });
function useAsync(keyValue, asyncFn) {
    (0, key_1.assertKey)(keyValue);
    const key = (0, key_1.stringifyKey)(keyValue);
    const elementId = (0, react_1.useId)();
    const resolver = async () => {
        const value = await asyncFn();
        return value;
    };
    const resolverSync = () => {
        const initData = getInitData(key, elementId);
        if (initData) {
            const { value } = initData;
            return { value: value };
        }
        return null;
    };
    return (0, useSuspense_1.useSuspense)({
        suspenses: globalObject.suspenses,
        resolver,
        resolverSync,
        key,
        elementId,
        needsWorkaround: true,
        asyncFnName: asyncFn.name,
    });
}
exports.useAsync = useAsync;
// See provider `provideInitData()`
function getInitData(key, elementId) {
    const elements = Array.from(window.document.querySelectorAll(`.${initData_1.initDataHtmlClass}`));
    for (const elem of elements) {
        (0, utils_1.assert)(elem.textContent);
        const initData = (0, parse_1.parse)(elem.textContent);
        (0, utils_1.assert)(typeof initData.key === 'string');
        (0, utils_1.assert)(typeof initData.elementId === 'string');
        if (initData.key === key && initData.elementId === elementId) {
            return initData;
        }
    }
    return null;
}
