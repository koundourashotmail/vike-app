import { assert, assertUsage, createDebugger } from '../utils';
export const debugFlow = createDebugger('react-streaming:flow');
// Needed for the hacky solution to workaround https://github.com/facebook/react/issues/24536
export function afterReactBugCatch(fn) {
    setTimeout(() => {
        fn();
    }, 0);
}
export function assertReactImport(fn, fnName) {
    assert(typeof fn === 'function');
    assertUsage(fn, `Couldn't import ${fnName}() from 'react-dom'`);
}
export function wrapStreamEnd(streamEnd, didError) {
    return (streamEnd
        // Needed because of the `afterReactBugCatch()` hack above, otherwise `onBoundaryError` triggers after `streamEnd` resolved
        .then(() => new Promise((r) => setTimeout(r, 0)))
        .then(() => !didError));
}
