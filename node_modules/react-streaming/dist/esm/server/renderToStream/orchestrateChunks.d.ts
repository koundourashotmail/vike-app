export { orchestrateChunks };
export type { InjectToStream };
export type { StreamOperations };
export type { Chunk };
export type { DoNotClosePromise };
declare type InjectToStreamOptions = {
    flush?: boolean;
};
declare type Chunk = string | Promise<string>;
declare type InjectToStream = (chunk: Chunk, options?: InjectToStreamOptions) => void;
declare type StreamOperations = {
    operations: null | {
        writeChunk: (chunk: unknown) => void;
        flush: null | (() => void);
    };
};
declare type DoNotClosePromise = {
    promise: null | Promise<void>;
};
declare function orchestrateChunks(streamOperations: StreamOperations, doNotClosePromise: DoNotClosePromise): {
    injectToStream: InjectToStream;
    onReactWrite: (chunk: unknown) => void;
    onBeforeEnd: () => Promise<void>;
    hasStreamEnded: () => boolean;
};
