export { renderToNodeStream };
// @ts-expect-error types export missing
import { renderToPipeableStream as renderToPipeableStream_ } from 'react-dom/server.node';
import { createPipeWrapper } from './createPipeWrapper';
import { afterReactBugCatch, assertReactImport, debugFlow, wrapStreamEnd } from './common';
async function renderToNodeStream(element, disable, options, doNotClosePromise, setAbortFn, clearTimeouts) {
    var _a;
    debugFlow('creating Node.js Stream Pipe');
    let onAllReady;
    const allReady = new Promise((r) => {
        onAllReady = () => r();
    });
    let onShellReady;
    const shellReady = new Promise((r) => {
        onShellReady = () => r();
    });
    let didError = false;
    let firstErr = null;
    let reactBug = null;
    const onError = (err) => {
        debugFlow('[react] onError() / onShellError()');
        didError = true;
        firstErr !== null && firstErr !== void 0 ? firstErr : (firstErr = err);
        onShellReady();
        afterReactBugCatch(() => {
            var _a;
            // Is not a React internal error (i.e. a React bug)
            if (err !== reactBug) {
                (_a = options.onBoundaryError) === null || _a === void 0 ? void 0 : _a.call(options, err);
            }
        });
    };
    const renderToPipeableStream = (_a = options.renderToPipeableStream) !== null && _a !== void 0 ? _a : renderToPipeableStream_;
    if (!options.renderToPipeableStream) {
        assertReactImport(renderToPipeableStream, 'renderToPipeableStream');
    }
    const { pipe: pipeOriginal, abort } = renderToPipeableStream(element, {
        ...options.streamOptions,
        onShellReady() {
            debugFlow('[react] onShellReady()');
            onShellReady();
        },
        onAllReady() {
            debugFlow('[react] onAllReady()');
            onShellReady();
            onAllReady();
        },
        onShellError: onError,
        onError,
    });
    setAbortFn(() => {
        abort();
    });
    let promiseResolved = false;
    const onReactBug = (err) => {
        debugFlow('react bug');
        didError = true;
        firstErr !== null && firstErr !== void 0 ? firstErr : (firstErr = err);
        reactBug = err;
        // Only log if it wasn't used as rejection for `await renderToStream()`
        if (reactBug !== firstErr || promiseResolved) {
            console.error(reactBug);
        }
    };
    const { pipeForUser, injectToStream, streamEnd, hasStreamEnded } = await createPipeWrapper(pipeOriginal, onReactBug, clearTimeouts, doNotClosePromise);
    await shellReady;
    if (didError)
        throw firstErr;
    if (disable)
        await allReady;
    if (didError)
        throw firstErr;
    promiseResolved = true;
    return {
        pipe: pipeForUser,
        abort,
        readable: null,
        streamEnd: wrapStreamEnd(streamEnd, didError),
        injectToStream,
        hasStreamEnded,
    };
}
