export { clientOnly };
import React, { Suspense, forwardRef, lazy, useEffect, useState, } from 'react';
function clientOnly(load) {
    var _a;
    // Client side: always bundled by Vite, import.meta.env.SSR === false
    // Server side: may or may not be bundled by Vite, import.meta.env.SSR === true || import.meta.env === undefined
    //@ts-expect-error
    (_a = import.meta).env ?? (_a.env = { SSR: true });
    if (import.meta.env.SSR) {
        return (props) => React.createElement(React.Fragment, null, props.fallback);
    }
    else {
        const Component = lazy(() => load()
            .then((LoadedComponent) => ('default' in LoadedComponent ? LoadedComponent : { default: LoadedComponent }))
            .catch((error) => {
            console.error('Component loading failed:', error);
            return { default: (() => React.createElement("p", null, "Error loading component.")) };
        }));
        return forwardRef((props, ref) => {
            const [mounted, setMounted] = useState(false);
            useEffect(() => {
                setMounted(true);
            }, []);
            if (!mounted) {
                return React.createElement(React.Fragment, null, props.fallback);
            }
            const { fallback, ...rest } = props;
            return (React.createElement(Suspense, { fallback: React.createElement(React.Fragment, null, props.fallback) },
                React.createElement(Component, { ...rest, ref: ref })));
        });
    }
}
