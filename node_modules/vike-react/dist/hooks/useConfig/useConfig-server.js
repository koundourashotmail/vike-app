export { useConfig };
import { usePageContext } from '../usePageContext.js';
import { getPageContext } from 'vike/getPageContext';
import { useStreamOptional } from 'react-streaming';
import { objectKeys } from '../../utils/objectKeys.js';
import { includes } from '../../utils/includes.js';
import { assert } from '../../utils/assert.js';
import { configsCumulative } from './configsCumulative.js';
/**
 * Set configurations inside components and Vike hooks.
 *
 * https://vike.dev/useConfig
 */
function useConfig() {
    // Vike hook
    let pageContext = getPageContext();
    if (pageContext)
        return (config) => setPageContextConfigFromHook(config, pageContext);
    // Component
    pageContext = usePageContext();
    const stream = useStreamOptional();
    return (config) => {
        if (!pageContext._headAlreadySet) {
            setPageContextConfigFromHook(config, pageContext);
        }
        else {
            assert(stream);
            // <head> already sent to the browser => send DOM-manipulating scripts during HTML streaming
            apply(config, stream);
        }
    };
}
const configsClientSide = ['title'];
function setPageContextConfigFromHook(config, pageContext) {
    pageContext._configFromHook ?? (pageContext._configFromHook = {});
    objectKeys(config).forEach((configName) => {
        var _a;
        // Skip HTML only configs which the client-side doesn't need, saving KBs sent to the client as well as avoiding serialization errors.
        if (pageContext.isClientSideNavigation && !configsClientSide.includes(configName))
            return;
        if (!includes(configsCumulative, configName)) {
            // Overridable config
            const configValue = config[configName];
            if (configValue === undefined)
                return;
            pageContext._configFromHook[configName] = configValue;
        }
        else {
            // Cumulative config
            const configValue = config[configName];
            if (!configValue)
                return;
            (_a = pageContext._configFromHook)[configName] ?? (_a[configName] = []);
            pageContext._configFromHook[configName].push(configValue);
        }
    });
}
function apply(config, stream) {
    const { title } = config;
    if (title) {
        const htmlSnippet = `<script>document.title = ${JSON.stringify(title)}</script>`;
        stream.injectToStream(htmlSnippet);
    }
}
