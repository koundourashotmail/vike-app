export { getPageElement };
import React, { Suspense, useEffect } from 'react';
import { PageContextProvider } from '../hooks/usePageContext.js';
function getPageElement(pageContext) {
    const { Page, config: { Loading }, } = pageContext;
    let page = Page ? React.createElement(Page, null) : null;
    // Wrapping
    const addSuspense = (el) => {
        if (!Loading?.layout)
            return el;
        return React.createElement(Suspense, { fallback: React.createElement(Loading.layout, null) }, page);
    };
    page = addSuspense(page);
    [
        // Inner wrapping
        ...(pageContext.config.Layout || []),
        // Outer wrapping
        ...(pageContext.config.Wrapper || []),
    ].forEach((Wrap) => {
        page = React.createElement(Wrap, null, page);
        page = addSuspense(page);
    });
    page = React.createElement(PageContextProvider, { pageContext: pageContext }, page);
    let renderPromiseResolve;
    let renderPromise = new Promise((r) => (renderPromiseResolve = r));
    page = React.createElement(RenderPromiseProvider, { renderPromiseResolve: renderPromiseResolve }, page);
    if (pageContext.config.reactStrictMode !== false) {
        page = React.createElement(React.StrictMode, null, page);
    }
    return { page, renderPromise };
}
function RenderPromiseProvider({ children, renderPromiseResolve, }) {
    useEffect(renderPromiseResolve);
    return children;
}
