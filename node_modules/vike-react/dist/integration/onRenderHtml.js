// https://vike.dev/onRenderHtml
export { onRenderHtml };
import React from 'react';
import { renderToString, renderToStaticMarkup } from 'react-dom/server';
import { renderToStream } from 'react-streaming/server';
import { dangerouslySkipEscape, escapeInject } from 'vike/server';
import { PageContextProvider } from '../hooks/usePageContext.js';
import { getHeadSetting } from './getHeadSetting.js';
import { getPageElement } from './getPageElement.js';
import { isReactElement } from '../utils/isReactElement.js';
import { getTagAttributesString } from '../utils/getTagAttributesString.js';
import { callCumulativeHooks } from '../utils/callCumulativeHooks.js';
import { resolveReactOptions } from './resolveReactOptions.js';
addEcosystemStamp();
const onRenderHtml = async (pageContext) => {
    const pageHtml = await getPageHtml(pageContext);
    const headHtml = getHeadHtml(pageContext);
    const { bodyHtmlBegin, bodyHtmlEnd } = await getBodyHtmlBoundary(pageContext);
    const { htmlAttributesString, bodyAttributesString } = getTagAttributes(pageContext);
    // Not needed on the client-side, thus we remove it to save KBs sent to the client
    delete pageContext._configFromHook;
    return escapeInject `<!DOCTYPE html>
    <html${dangerouslySkipEscape(htmlAttributesString)}>
      <head>
        <meta charset="UTF-8" />
        ${headHtml}
      </head>
      <body${dangerouslySkipEscape(bodyAttributesString)}>
        ${bodyHtmlBegin}
        <div id="root">${pageHtml}</div>
        ${bodyHtmlEnd}
      </body>
    </html>`;
};
async function getPageHtml(pageContext) {
    if (pageContext.Page)
        pageContext.page = getPageElement(pageContext).page;
    // https://github.com/vikejs/vike-react/issues/87#issuecomment-2488742744
    await callCumulativeHooks(pageContext.config.onBeforeRenderHtml, pageContext);
    const { renderToStringOptions } = resolveReactOptions(pageContext);
    let pageHtml = '';
    if (pageContext.page) {
        const { stream, streamIsRequired } = pageContext.config;
        if (!stream && !streamIsRequired) {
            const pageHtmlString = renderToString(pageContext.page, renderToStringOptions);
            pageContext.pageHtmlString = pageHtmlString;
            pageHtml = dangerouslySkipEscape(pageHtmlString);
        }
        else {
            const pageHtmlStream = await renderToStream(pageContext.page, {
                webStream: typeof stream === 'string' ? stream === 'web' : undefined,
                userAgent: pageContext.headers?.['user-agent'] ||
                    // TODO/eventually: remove old way of acccessing the User Agent header.
                    // @ts-ignore
                    pageContext.userAgent,
                disable: stream === false ? true : undefined,
            });
            pageContext.pageHtmlStream = pageHtmlStream;
            pageHtml = pageHtmlStream;
        }
    }
    // https://github.com/vikejs/vike/discussions/1804#discussioncomment-10394481
    await callCumulativeHooks(pageContext.config.onAfterRenderHtml, pageContext);
    return pageHtml;
}
function getHeadHtml(pageContext) {
    pageContext._headAlreadySet = true;
    const favicon = getHeadSetting('favicon', pageContext);
    const title = getHeadSetting('title', pageContext);
    const description = getHeadSetting('description', pageContext);
    const image = getHeadSetting('image', pageContext);
    const faviconTag = !favicon ? '' : escapeInject `<link rel="icon" href="${favicon}" />`;
    const titleTags = !title ? '' : escapeInject `<title>${title}</title><meta property="og:title" content="${title}" />`;
    const descriptionTags = !description
        ? ''
        : escapeInject `<meta name="description" content="${description}" /><meta property="og:description" content="${description}" />`;
    const imageTags = !image
        ? ''
        : escapeInject `<meta property="og:image" content="${image}"><meta name="twitter:card" content="summary_large_image">`;
    const viewportTag = dangerouslySkipEscape(getViewportTag(getHeadSetting('viewport', pageContext)));
    const headElementsHtml = dangerouslySkipEscape([
        // Added by +Head
        ...(pageContext.config.Head ?? []),
        // Added by useConfig()
        ...(pageContext._configFromHook?.Head ?? []),
    ]
        .filter((Head) => Head !== null && Head !== undefined)
        .map((Head) => getHeadElementHtml(Head, pageContext))
        .join('\n'));
    const headHtml = escapeInject `
    ${titleTags}
    ${viewportTag}
    ${headElementsHtml}
    ${faviconTag}
    ${descriptionTags}
    ${imageTags}
  `;
    return headHtml;
}
function getHeadElementHtml(Head, pageContext) {
    let headElement;
    if (isReactElement(Head)) {
        headElement = Head;
    }
    else {
        headElement = (React.createElement(PageContextProvider, { pageContext: pageContext },
            React.createElement(Head, null)));
    }
    if (pageContext.config.reactStrictMode !== false) {
        headElement = React.createElement(React.StrictMode, null, headElement);
    }
    return renderToStaticMarkup(headElement);
}
function getTagAttributes(pageContext) {
    let lang = getHeadSetting('lang', pageContext);
    // Don't set `lang` to its default value if it's `null` (so that users can set it to `null` in order to remove the default value)
    if (lang === undefined)
        lang = 'en';
    const bodyAttributes = mergeTagAttributesList(getHeadSetting('bodyAttributes', pageContext));
    const htmlAttributes = mergeTagAttributesList(getHeadSetting('htmlAttributes', pageContext));
    const bodyAttributesString = getTagAttributesString(bodyAttributes);
    const htmlAttributesString = getTagAttributesString({ ...htmlAttributes, lang: lang ?? htmlAttributes.lang });
    return { htmlAttributesString, bodyAttributesString };
}
function mergeTagAttributesList(tagAttributesList = []) {
    const tagAttributes = {};
    tagAttributesList.forEach((tagAttrs) => Object.assign(tagAttributes, tagAttrs));
    return tagAttributes;
}
function getViewportTag(viewport) {
    if (viewport === 'responsive' || viewport === undefined) {
        // `user-scalable=no` isn't recommended anymore:
        //   - https://stackoverflow.com/questions/22354435/to-user-scalable-no-or-not-to-user-scalable-no/22544312#comment120949420_22544312
        return '<meta name="viewport" content="width=device-width,initial-scale=1">';
    }
    if (typeof viewport === 'number') {
        return `<meta name="viewport" content="width=${viewport}">`;
    }
    return '';
}
// For improving error messages of:
// - react-streaming https://github.com/brillout/react-streaming/blob/6a43dd20c27fb5d751dca41466b06ee3f4f35462/src/server/useStream.ts#L21
// - vike https://github.com/vikejs/vike/blob/96c0155380ffebd4976ab076b58e86d8eb2d603a/vike/node/runtime/html/stream/react-streaming.ts#L31
function addEcosystemStamp() {
    const g = globalThis;
    g._isVikeReactApp =
        /* Don't set to true so that consumers do `!!globalThis._isVikeApp` instead of `globalThis._isVikeApp === true`.
        true
        */
        // We use an object so that we can eventually, in the future, add helpful information as needed. (E.g. the vike-react version.)
        {};
}
async function getBodyHtmlBoundary(pageContext) {
    const bodyHtmlBegin = dangerouslySkipEscape((await callCumulativeHooks(pageContext.config.bodyHtmlBegin, pageContext)).join(''));
    const bodyHtmlEnd = dangerouslySkipEscape((await callCumulativeHooks(pageContext.config.bodyHtmlEnd, pageContext)).join(''));
    return { bodyHtmlBegin, bodyHtmlEnd };
}
