export { loadPageConfigsLazyServerSideAndExecHook };
export type { PageContext_loadPageConfigsLazyServerSide };
export type { PageConfigsLazy };
import { PromiseType } from '../utils.js';
import { PageContextGetPageAssets, type PageAsset } from './getPageAssets.js';
import { type PageContextDebugRouteMatches } from './debugPageFiles.js';
import type { GlobalContextServerInternal } from '../globalContext.js';
import { type PageContextExecHookServer } from './execHookServer.js';
type PageContextExecuteHook = Omit<PageContextExecHookServer, keyof Awaited<ReturnType<typeof loadPageConfigsLazyServerSide>>>;
type PageContext_loadPageConfigsLazyServerSide = PageContextGetPageAssets & PageContextDebugRouteMatches & {
    pageId: string;
    urlOriginal: string;
    _globalContext: GlobalContextServerInternal;
};
type PageConfigsLazy = PromiseType<ReturnType<typeof loadPageConfigsLazyServerSide>>;
declare function loadPageConfigsLazyServerSideAndExecHook<PageContext extends PageContext_loadPageConfigsLazyServerSide & PageContextExecuteHook>(pageContext: PageContext): Promise<PageContext & import("../../../shared/getPageFiles.js").VikeConfigPublicPageLazy & {
    Page: unknown;
    _isHtmlOnly: boolean;
    _passToClient: string[];
    _pageFilePathsLoaded: string[];
} & {
    __getPageAssets: () => Promise<PageAsset[]>;
}>;
declare function loadPageConfigsLazyServerSide(pageContext: PageContext_loadPageConfigsLazyServerSide): Promise<import("../../../shared/getPageFiles.js").VikeConfigPublicPageLazy & {
    Page: unknown;
    _isHtmlOnly: boolean;
    _passToClient: string[];
    _pageFilePathsLoaded: string[];
} & {
    __getPageAssets: () => Promise<PageAsset[]>;
}>;
