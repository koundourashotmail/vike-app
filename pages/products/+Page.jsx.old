import React, { useState, useEffect } from 'react'
import { useAuth } from '../../components/AuthContext'

export default function ProductsPage() {
  const [products, setProducts] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')
  const [showCreateForm, setShowCreateForm] = useState(false)
  const [editingProduct, setEditingProduct] = useState(null)
  const [stats, setStats] = useState({ total: 0 })

  const { getAuthHeaders, logout } = useAuth()

  // Form state
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    price: '',
    category: '',
    stock: '',
    image: null
  })

  useEffect(() => {
    fetchProducts()
    fetchStats()
  }, [])

  const fetchProducts = async () => {
    try {
      const response = await fetch('/api/products', {
        headers: getAuthHeaders()
      })
      const data = await response.json()
      
      if (data.success) {
        setProducts(data.data.products)
      } else {
        setError(data.message)
      }
    } catch (err) {
      setError('Failed to fetch products')
    } finally {
      setLoading(false)
    }
  }

  const fetchStats = async () => {
    try {
      const response = await fetch('/api/products/stats', {
        headers: getAuthHeaders()
      })
      const data = await response.json()
      
      if (data.success) {
        setStats(data.data)
      }
    } catch (err) {
      console.error('Failed to fetch stats:', err)
    }
  }

  const handleInputChange = (e) => {
    const { name, value, type, files } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: type === 'file' ? files[0] : value
    }))
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    const formDataToSend = new FormData()
    formDataToSend.append('name', formData.name)
    formDataToSend.append('description', formData.description)
    formDataToSend.append('price', formData.price)
    formDataToSend.append('category', formData.category)
    formDataToSend.append('stock', formData.stock)
    
    if (formData.image) {
      formDataToSend.append('image', formData.image)
    }

    try {
      const url = editingProduct 
        ? `/api/products/${editingProduct.id}`
        : '/api/products'
      
      const method = editingProduct ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          ...getAuthHeaders(),
          // Don't set Content-Type for FormData
        },
        body: formDataToSend
      })

      const data = await response.json()

      if (data.success) {
        await fetchProducts()
        await fetchStats()
        resetForm()
        setError('')
      } else {
        setError(data.message)
      }
    } catch (err) {
      setError('Failed to save product')
    }
  }

  const handleEdit = (product) => {
    setEditingProduct(product)
    setFormData({
      name: product.name,
      description: product.description,
      price: product.price.toString(),
      category: product.category,
      stock: product.stock.toString(),
      image: null
    })
    setShowCreateForm(true)
  }

  const handleDelete = async (productId) => {
    if (!confirm('Are you sure you want to delete this product?')) return

    try {
      const response = await fetch(`/api/products/${productId}`, {
        method: 'DELETE',
        headers: getAuthHeaders()
      })

      const data = await response.json()

      if (data.success) {
        await fetchProducts()
        await fetchStats()
      } else {
        setError(data.message)
      }
    } catch (err) {
      setError('Failed to delete product')
    }
  }

  const resetForm = () => {
    setFormData({
      name: '',
      description: '',
      price: '',
      category: '',
      stock: '',
      image: null
    })
    setShowCreateForm(false)
    setEditingProduct(null)
  }

  if (loading) {
    return (
      <div style={styles.container}>
        <div style={styles.loading}>Loading products...</div>
      </div>
    )
  }

  return (
    <div style={styles.container}>
      <div style={styles.header}>
        <div>
          <h1 style={styles.title}>üõçÔ∏è Product Management</h1>
          <p style={styles.subtitle}>Manage your product inventory</p>
        </div>
        <div style={styles.headerActions}>
          <div style={styles.stats}>
            <span style={styles.statItem}>Total Products: {stats.total}</span>
          </div>
          <button 
            onClick={logout}
            style={styles.logoutBtn}
          >
            Logout
          </button>
        </div>
      </div>

      {error && (
        <div style={styles.error}>
          {error}
        </div>
      )}

      <div style={styles.actions}>
        <button
          onClick={() => setShowCreateForm(!showCreateForm)}
          style={styles.primaryBtn}
        >
          {showCreateForm ? 'Cancel' : '+ Add Product'}
        </button>
      </div>

      {showCreateForm && (
        <div style={styles.formContainer}>
          <h3>{editingProduct ? 'Edit Product' : 'Create New Product'}</h3>
          <form onSubmit={handleSubmit} style={styles.form}>
            <div style={styles.formRow}>
              <div style={styles.formGroup}>
                <label style={styles.label}>Product Name *</label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  style={styles.input}
                  required
                />
              </div>
              <div style={styles.formGroup}>
                <label style={styles.label}>Category *</label>
                <input
                  type="text"
                  name="category"
                  value={formData.category}
                  onChange={handleInputChange}
                  style={styles.input}
                  required
                />
              </div>
            </div>

            <div style={styles.formGroup}>
              <label style={styles.label}>Description *</label>
              <textarea
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                style={styles.textarea}
                rows="3"
                required
              />
            </div>

            <div style={styles.formRow}>
              <div style={styles.formGroup}>
                <label style={styles.label}>Price ($) *</label>
                <input
                  type="number"
                  name="price"
                  value={formData.price}
                  onChange={handleInputChange}
                  style={styles.input}
                  step="0.01"
                  min="0"
                  required
                />
              </div>
              <div style={styles.formGroup}>
                <label style={styles.label}>Stock Quantity *</label>
                <input
                  type="number"
                  name="stock"
                  value={formData.stock}
                  onChange={handleInputChange}
                  style={styles.input}
                  min="0"
                  required
                />
              </div>
            </div>

            <div style={styles.formGroup}>
              <label style={styles.label}>Product Image</label>
              <input
                type="file"
                name="image"
                onChange={handleInputChange}
                style={styles.fileInput}
                accept="image/*"
              />
              <small style={styles.helpText}>Max file size: 5MB. Supported formats: JPG, PNG, GIF</small>
            </div>

            <div style={styles.formActions}>
              <button type="submit" style={styles.submitBtn}>
                {editingProduct ? 'Update Product' : 'Create Product'}
              </button>
              <button type="button" onClick={resetForm} style={styles.cancelBtn}>
                Cancel
              </button>
            </div>
          </form>
        </div>
      )}

      <div style={styles.productGrid}>
        {products.length === 0 ? (
          <div style={styles.emptyState}>
            <h3>No products yet</h3>
            <p>Create your first product to get started!</p>
          </div>
        ) : (
          products.map(product => (
            <div key={product.id} style={styles.productCard}>
              {product.imageUrl && (
                <img 
                  src={product.imageUrl} 
                  alt={product.name}
                  style={styles.productImage}
                />
              )}
              <div style={styles.productContent}>
                <h3 style={styles.productName}>{product.name}</h3>
                <p style={styles.productCategory}>{product.category}</p>
                <p style={styles.productDescription}>{product.description}</p>
                <div style={styles.productMeta}>
                  <span style={styles.productPrice}>${product.price}</span>
                  <span style={styles.productStock}>Stock: {product.stock}</span>
                </div>
                <div style={styles.productActions}>
                  <button
                    onClick={() => handleEdit(product)}
                    style={styles.editBtn}
                  >
                    Edit
                  </button>
                  <button
                    onClick={() => handleDelete(product.id)}
                    style={styles.deleteBtn}
                  >
                    Delete
                  </button>
                </div>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  )
}

const styles = {
  container: {
    maxWidth: '1200px',
    margin: '0 auto',
    padding: '20px',
    fontFamily: 'Arial, sans-serif'
  },
  header: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: '30px',
    flexWrap: 'wrap',
    gap: '20px'
  },
  title: {
    margin: '0 0 5px 0',
    color: '#2c3e50',
    fontSize: '2.5rem'
  },
  subtitle: {
    margin: 0,
    color: '#7f8c8d',
    fontSize: '1.1rem'
  },
  headerActions: {
    display: 'flex',
    alignItems: 'center',
    gap: '20px',
    flexWrap: 'wrap'
  },
  stats: {
    display: 'flex',
    gap: '15px'
  },
  statItem: {
    background: '#ecf0f1',
    padding: '8px 12px',
    borderRadius: '6px',
    fontSize: '0.9rem',
    fontWeight: 'bold',
    color: '#2c3e50'
  },
  logoutBtn: {
    padding: '10px 20px',
    backgroundColor: '#e74c3c',
    color: 'white',
    border: 'none',
    borderRadius: '6px',
    cursor: 'pointer',
    fontSize: '0.9rem'
  },
  loading: {
    textAlign: 'center',
    padding: '50px',
    fontSize: '1.2rem',
    color: '#7f8c8d'
  },
  error: {
    background: '#f8d7da',
    color: '#721c24',
    padding: '12px',
    borderRadius: '6px',
    marginBottom: '20px',
    border: '1px solid #f5c6cb'
  },
  actions: {
    marginBottom: '30px'
  },
  primaryBtn: {
    padding: '12px 24px',
    backgroundColor: '#3498db',
    color: 'white',
    border: 'none',
    borderRadius: '6px',
    cursor: 'pointer',
    fontSize: '1rem',
    fontWeight: 'bold'
  },
  formContainer: {
    background: '#f8f9fa',
    padding: '30px',
    borderRadius: '8px',
    marginBottom: '30px',
    border: '1px solid #dee2e6'
  },
  form: {
    display: 'flex',
    flexDirection: 'column',
    gap: '20px'
  },
  formRow: {
    display: 'flex',
    gap: '20px',
    flexWrap: 'wrap'
  },
  formGroup: {
    flex: 1,
    minWidth: '250px'
  },
  label: {
    display: 'block',
    marginBottom: '5px',
    fontWeight: 'bold',
    color: '#2c3e50'
  },
  input: {
    width: '100%',
    padding: '10px',
    border: '1px solid #ddd',
    borderRadius: '4px',
    fontSize: '1rem',
    boxSizing: 'border-box'
  },
  textarea: {
    width: '100%',
    padding: '10px',
    border: '1px solid #ddd',
    borderRadius: '4px',
    fontSize: '1rem',
    resize: 'vertical',
    boxSizing: 'border-box'
  },
  fileInput: {
    width: '100%',
    padding: '8px',
    border: '1px solid #ddd',
    borderRadius: '4px',
    fontSize: '1rem',
    boxSizing: 'border-box'
  },
  helpText: {
    color: '#6c757d',
    fontSize: '0.85rem',
    marginTop: '5px',
    display: 'block'
  },
  formActions: {
    display: 'flex',
    gap: '10px',
    justifyContent: 'flex-start'
  },
  submitBtn: {
    padding: '12px 24px',
    backgroundColor: '#27ae60',
    color: 'white',
    border: 'none',
    borderRadius: '6px',
    cursor: 'pointer',
    fontSize: '1rem'
  },
  cancelBtn: {
    padding: '12px 24px',
    backgroundColor: '#95a5a6',
    color: 'white',
    border: 'none',
    borderRadius: '6px',
    cursor: 'pointer',
    fontSize: '1rem'
  },
  productGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',
    gap: '20px'
  },
  emptyState: {
    textAlign: 'center',
    padding: '50px',
    color: '#7f8c8d',
    gridColumn: '1 / -1'
  },
  productCard: {
    background: 'white',
    border: '1px solid #dee2e6',
    borderRadius: '8px',
    overflow: 'hidden',
    boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
    transition: 'transform 0.2s, box-shadow 0.2s'
  },
  productImage: {
    width: '100%',
    height: '200px',
    objectFit: 'cover'
  },
  productContent: {
    padding: '20px'
  },
  productName: {
    margin: '0 0 5px 0',
    color: '#2c3e50',
    fontSize: '1.3rem'
  },
  productCategory: {
    margin: '0 0 10px 0',
    color: '#3498db',
    fontSize: '0.9rem',
    fontWeight: 'bold',
    textTransform: 'uppercase'
  },
  productDescription: {
    margin: '0 0 15px 0',
    color: '#7f8c8d',
    lineHeight: '1.4'
  },
  productMeta: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: '15px'
  },
  productPrice: {
    fontSize: '1.4rem',
    fontWeight: 'bold',
    color: '#27ae60'
  },
  productStock: {
    fontSize: '0.9rem',
    color: '#7f8c8d'
  },
  productActions: {
    display: 'flex',
    gap: '10px'
  },
  editBtn: {
    flex: 1,
    padding: '8px 16px',
    backgroundColor: '#f39c12',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '0.9rem'
  },
  deleteBtn: {
    flex: 1,
    padding: '8px 16px',
    backgroundColor: '#e74c3c',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '0.9rem'
  }
}